<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="20" failures="0" errors="0" time="2.72">
    <testsuite name="tests/About.test.tsx" timestamp="2024-08-27T07:15:24.067Z" hostname="IN-KA-F220DE" tests="3" failures="0" errors="0" skipped="1" time="0.027">
        <testcase classname="tests/About.test.tsx" name="About &gt; renders the About component" time="0.02">
            <system-out>
[36m&lt;body&gt;[39m
  [36m&lt;div&gt;[39m
    [36m&lt;div&gt;[39m
      [36m&lt;h5&gt;[39m
        [0mAbout Component[0m
      [36m&lt;/h5&gt;[39m
      [36m&lt;button[39m
        [33mdata-testid[39m=[32m&quot;button&quot;[39m
        [33mdisabled[39m=[32m&quot;&quot;[39m
      [36m&gt;[39m
        [0mClick Me![0m
      [36m&lt;/button&gt;[39m
      [36m&lt;div&gt;[39m
        [36m&lt;input[39m
          [33mdata-testid[39m=[32m&quot;element-to-focus&quot;[39m
          [33mtype[39m=[32m&quot;text&quot;[39m
        [36m/&gt;[39m
      [36m&lt;/div&gt;[39m
    [36m&lt;/div&gt;[39m
  [36m&lt;/div&gt;[39m
[36m&lt;/body&gt;[39m

            </system-out>
        </testcase>
        <testcase classname="tests/About.test.tsx" name="About &gt; renders button and input element" time="0.005">
        </testcase>
        <testcase classname="tests/About.test.tsx" name="suite &gt; unimplemented test" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="tests/App.test.tsx" timestamp="2024-08-27T07:15:24.071Z" hostname="IN-KA-F220DE" tests="4" failures="0" errors="0" skipped="0" time="0.058">
        <testcase classname="tests/App.test.tsx" name="App &gt; renders the App component" time="0.044">
            <system-out>
[36m&lt;body&gt;[39m
  [36m&lt;div&gt;[39m
    [36m&lt;div&gt;[39m
      [36m&lt;h4&gt;[39m
        [0mApp Component[0m
      [36m&lt;/h4&gt;[39m
      [36m&lt;p&gt;[39m
        [0m I am in App component[0m
      [36m&lt;/p&gt;[39m
      [36m&lt;div&gt;[39m
        [36m&lt;h3&gt;[39m
          [0mHome Component[0m
        [36m&lt;/h3&gt;[39m
        [36m&lt;p[39m
          [33mdata-testid[39m=[32m&quot;para&quot;[39m
        [36m&gt;[39m
          [0mThis is paragraph in Home Component[0m
        [36m&lt;/p&gt;[39m
      [36m&lt;/div&gt;[39m
      [36m&lt;div&gt;[39m
        [36m&lt;h5&gt;[39m
          [0mAbout Component[0m
        [36m&lt;/h5&gt;[39m
        [36m&lt;button[39m
          [33mdata-testid[39m=[32m&quot;button&quot;[39m
          [33mdisabled[39m=[32m&quot;&quot;[39m
        [36m&gt;[39m
          [0mClick Me![0m
        [36m&lt;/button&gt;[39m
        [36m&lt;div&gt;[39m
          [36m&lt;input[39m
            [33mdata-testid[39m=[32m&quot;element-to-focus&quot;[39m
            [33mtype[39m=[32m&quot;text&quot;[39m
          [36m/&gt;[39m
        [36m&lt;/div&gt;[39m
      [36m&lt;/div&gt;[39m
      [36m&lt;div&gt;[39m
        [0mHello, [0m
        [0mGuest[0m
        [0m![0m
      [36m&lt;/div&gt;[39m
      [36m&lt;div&gt;[39m
        [0mGender: [0m
        [0mNA[0m
      [36m&lt;/div&gt;[39m
      [36m&lt;div&gt;[39m
        [0mLoading...[0m
      [36m&lt;/div&gt;[39m
      [36m&lt;div /&gt;[39m
      [36m&lt;form&gt;[39m
        [36m&lt;input[39m
          [33mplaceholder[39m=[32m&quot;Email&quot;[39m
          [33mtype[39m=[32m&quot;email&quot;[39m
          [33mvalue[39m=[32m&quot;&quot;[39m
        [36m/&gt;[39m
        [36m&lt;input[39m
          [33mplaceholder[39m=[32m&quot;Password&quot;[39m
          [33mtype[39m=[32m&quot;password&quot;[39m
          [33mvalue[39m=[32m&quot;&quot;[39m
        [36m/&gt;[39m
        [36m&lt;button[39m
          [33mtype[39m=[32m&quot;submit&quot;[39m
        [36m&gt;[39m
          [0mLogin[0m
        [36m&lt;/button&gt;[39m
      [36m&lt;/form&gt;[39m
    [36m&lt;/div&gt;[39m
  [36m&lt;/div&gt;[39m
[36m&lt;/body&gt;[39m

            </system-out>
            <system-err>
[31mWarning: An update to UserGreeting inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at UserGreeting (/Users/shivangiasthana/Desktop/vitest/vite-project-react-vitest/src/component/UserGreeting.tsx:8:49)
    at div
    at App[39m
[31mWarning: An update to UserGreeting inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at UserGreeting (/Users/shivangiasthana/Desktop/vitest/vite-project-react-vitest/src/component/UserGreeting.tsx:8:49)
    at div
    at App[39m

            </system-err>
        </testcase>
        <testcase classname="tests/App.test.tsx" name="App &gt; App component snapshot test" time="0.013">
            <system-err>
[31mWarning: An update to UserGreeting inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at UserGreeting (/Users/shivangiasthana/Desktop/vitest/vite-project-react-vitest/src/component/UserGreeting.tsx:8:49)
    at div
    at App[39m
[31mWarning: An update to UserGreeting inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at UserGreeting (/Users/shivangiasthana/Desktop/vitest/vite-project-react-vitest/src/component/UserGreeting.tsx:8:49)
    at div
    at App[39m

            </system-err>
        </testcase>
        <testcase classname="tests/App.test.tsx" name="add items to todos" time="0">
        </testcase>
        <testcase classname="tests/App.test.tsx" name="move items from todos to archive" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/Home.test.tsx" timestamp="2024-08-27T07:15:24.073Z" hostname="IN-KA-F220DE" tests="3" failures="0" errors="0" skipped="1" time="0.019">
        <testcase classname="tests/Home.test.tsx" name="Home &gt; renders the Home component" time="0.018">
        </testcase>
        <testcase classname="tests/Home.test.tsx" name="Home &gt; renders the header" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/Home.test.tsx" name="Home &gt; renders the paragraph" time="0.018">
            <system-out>
[36m&lt;body&gt;[39m
  [36m&lt;div&gt;[39m
    [36m&lt;div&gt;[39m
      [36m&lt;h3&gt;[39m
        [0mHome Component[0m
      [36m&lt;/h3&gt;[39m
      [36m&lt;p[39m
        [33mdata-testid[39m=[32m&quot;para&quot;[39m
      [36m&gt;[39m
        [0mThis is paragraph in Home Component[0m
      [36m&lt;/p&gt;[39m
    [36m&lt;/div&gt;[39m
  [36m&lt;/div&gt;[39m
[36m&lt;/body&gt;[39m

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/LoginForm.test.tsx" timestamp="2024-08-27T07:15:24.078Z" hostname="IN-KA-F220DE" tests="1" failures="0" errors="0" skipped="0" time="0.13">
        <testcase classname="tests/LoginForm.test.tsx" name="LoginForm &gt; should fill in the login form and submit" time="0.129">
        </testcase>
    </testsuite>
    <testsuite name="tests/Message.test.tsx" timestamp="2024-08-27T07:15:24.079Z" hostname="IN-KA-F220DE" tests="2" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/Message.test.tsx" name="reading messages &gt; should get the latest message with a spy" time="0.001">
        </testcase>
        <testcase classname="tests/Message.test.tsx" name="reading messages &gt; should get with a mock" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/MyComponent.test.tsx" timestamp="2024-08-27T07:15:24.079Z" hostname="IN-KA-F220DE" tests="1" failures="0" errors="0" skipped="0" time="1.957">
        <testcase classname="tests/MyComponent.test.tsx" name="MyComponent &gt; should eventually display fetched data" time="1.956">
            <system-err>
[31mWarning: An update to MyComponent inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at MyComponent (/Users/shivangiasthana/Desktop/vitest/vite-project-react-vitest/src/component/MyComponent.tsx:6:49)[39m

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/UserGreeting.test.tsx" timestamp="2024-08-27T07:15:24.079Z" hostname="IN-KA-F220DE" tests="3" failures="0" errors="0" skipped="0" time="0.034">
        <testcase classname="tests/UserGreeting.test.tsx" name="UserGreeting &gt; should display user name when getUser resolves" time="0.022">
            <system-out>
Is mocked before restore: [33mtrue[39m
Is mocked after restore: [33mfalse[39m

            </system-out>
        </testcase>
        <testcase classname="tests/UserGreeting.test.tsx" name="UserGreeting &gt; should display &quot;Guest&quot; when getUser rejects" time="0.006">
            <system-err>
error Error: Failed to fetch user
    at [90m/Users/shivangiasthana/Desktop/vitest/vite-project-react-vitest/[39mtests/UserGreeting.test.tsx:34:7
    at [90mfile:///Users/shivangiasthana/Desktop/vitest/vite-project-react-vitest/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///Users/shivangiasthana/Desktop/vitest/vite-project-react-vitest/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:61:7
    at runTest [90m(file:///Users/shivangiasthana/Desktop/vitest/vite-project-react-vitest/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:960:17[90m)[39m
    at runSuite [90m(file:///Users/shivangiasthana/Desktop/vitest/vite-project-react-vitest/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1116:15[90m)[39m
    at runSuite [90m(file:///Users/shivangiasthana/Desktop/vitest/vite-project-react-vitest/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1116:15[90m)[39m
    at runFiles [90m(file:///Users/shivangiasthana/Desktop/vitest/vite-project-react-vitest/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1173:5[90m)[39m
    at startTests [90m(file:///Users/shivangiasthana/Desktop/vitest/vite-project-react-vitest/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1182:3[90m)[39m
    at [90mfile:///Users/shivangiasthana/Desktop/vitest/vite-project-react-vitest/[39mnode_modules/[4mvitest[24m/dist/chunks/runBaseTests.CyvqmuC9.js:130:11
    at withEnv [90m(file:///Users/shivangiasthana/Desktop/vitest/vite-project-react-vitest/[39mnode_modules/[4mvitest[24m/dist/chunks/runBaseTests.CyvqmuC9.js:94:5[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="tests/UserGreeting.test.tsx" name="UserGreeting &gt; should display user gender" time="0.005">
        </testcase>
    </testsuite>
    <testsuite name="tests/UserList.test.tsx" timestamp="2024-08-27T07:15:24.080Z" hostname="IN-KA-F220DE" tests="2" failures="0" errors="0" skipped="0" time="0.053">
        <testcase classname="tests/UserList.test.tsx" name="UserList &gt; should display users from the API" time="0.038">
        </testcase>
        <testcase classname="tests/UserList.test.tsx" name="UserList &gt; should display error message when API request fails" time="0.013">
        </testcase>
    </testsuite>
    <testsuite name="tests/UtilityFunction.test.tsx" timestamp="2024-08-27T07:15:24.080Z" hostname="IN-KA-F220DE" tests="1" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/UtilityFunction.test.tsx" name="checkEven type tests" time="0.001">
        </testcase>
    </testsuite>
</testsuites>
